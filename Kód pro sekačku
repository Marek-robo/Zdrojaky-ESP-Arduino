#include <BluetoothSerial.h>
#include <ESP32Servo.h>

BluetoothSerial SerialBT;

#define L_IN1 16
#define L_IN2 17
#define L_IN3 18
#define L_IN4 19
#define R_IN1 12
#define R_IN2 13
#define R_IN3 14
#define R_IN4 15
#define MOTOR_IN1 25
#define MOTOR_IN2 26

#define SERVO1_PIN 32
#define SERVO2_PIN 33

#define STEP_DELAY 2
#define WHEEL_CIRCUMFERENCE 22.0
#define STEP_PER_REV 2048
#define WHEEL_DISTANCE 10.0

Servo servo1;
Servo servo2;

int stepsPerCM = STEP_PER_REV / WHEEL_CIRCUMFERENCE;

bool movingForward = false;
bool movingBackward = false;
bool turningLeft = false;
bool turningRight = false;
bool bladeMotorOn = false;
bool servosExtended = false;

int leftStep = 0;
int rightStep = 0;

void setup() {
  Serial.begin(115200);
  SerialBT.begin("ESP32_Sekacka");

  pinMode(L_IN1, OUTPUT);
  pinMode(L_IN2, OUTPUT);
  pinMode(L_IN3, OUTPUT);
  pinMode(L_IN4, OUTPUT);
  pinMode(R_IN1, OUTPUT);
  pinMode(R_IN2, OUTPUT);
  pinMode(R_IN3, OUTPUT);
  pinMode(R_IN4, OUTPUT);
  pinMode(MOTOR_IN1, OUTPUT);
  pinMode(MOTOR_IN2, OUTPUT);

  servo1.attach(SERVO1_PIN);
  servo2.attach(SERVO2_PIN);
  servo1.write(90); // výchozí střed
  servo2.write(90);

  stopMotors();
  stopBladeMotor();
}

void stepMotor(int in1, int in2, int in3, int in4, int &step, int direction) {
  step += direction;
  switch (step % 4) {
    case 0: digitalWrite(in1, HIGH); digitalWrite(in2, LOW); digitalWrite(in3, LOW); digitalWrite(in4, LOW); break;
    case 1: digitalWrite(in1, LOW); digitalWrite(in2, HIGH); digitalWrite(in3, LOW); digitalWrite(in4, LOW); break;
    case 2: digitalWrite(in1, LOW); digitalWrite(in2, LOW); digitalWrite(in3, HIGH); digitalWrite(in4, LOW); break;
    case 3: digitalWrite(in1, LOW); digitalWrite(in2, LOW); digitalWrite(in3, LOW); digitalWrite(in4, HIGH); break;
  }
}

void moveForward() {
  movingForward = true;
  movingBackward = turningLeft = turningRight = false;
}

void moveBackward() {
  movingBackward = true;
  movingForward = turningLeft = turningRight = false;
}

void turnLeft() {
  turningLeft = true;
  movingForward = movingBackward = turningRight = false;
}

void turnRight() {
  turningRight = true;
  movingForward = movingBackward = turningLeft = false;
}

void stopMotors() {
  movingForward = movingBackward = turningLeft = turningRight = false;
  digitalWrite(L_IN1, LOW);
  digitalWrite(L_IN2, LOW);
  digitalWrite(L_IN3, LOW);
  digitalWrite(L_IN4, LOW);
  digitalWrite(R_IN1, LOW);
  digitalWrite(R_IN2, LOW);
  digitalWrite(R_IN3, LOW);
  digitalWrite(R_IN4, LOW);
}

void startBladeMotor() {
  digitalWrite(MOTOR_IN1, HIGH);
  digitalWrite(MOTOR_IN2, LOW);
  bladeMotorOn = true;
}

void stopBladeMotor() {
  digitalWrite(MOTOR_IN1, LOW);
  digitalWrite(MOTOR_IN2, LOW);
  bladeMotorOn = false;
}

void extendServos() {
  // Pomalu zpět do středu
  for (int angle = 90; angle <= 150; angle++) {
    servo1.write(angle);       // zpět z 45 na 90
    servo2.write(90 + (90 - angle)); // zpět z 135 na 90
    delay(15);
  }

  delay(4000); // Pauza na konci


for (int angle = 150; angle >= 90; angle--) {
    servo1.write(angle);       // servo1 z 90 na 45 (doleva)
    servo2.write(90 + (90 - angle)); // servo2 z 90 na 135 (doprava)
    delay(15);
  }
  

  servosExtended = false;
}


void loop() {
  if (movingBackward) {
    stepMotor(L_IN1, L_IN2, L_IN3, L_IN4, leftStep, 49);
    stepMotor(R_IN1, R_IN2, R_IN3, R_IN4, rightStep, 49);
  } else if (movingForward) {
    stepMotor(L_IN1, L_IN2, L_IN3, L_IN4, leftStep, 51);
    stepMotor(R_IN1, R_IN2, R_IN3, R_IN4, rightStep, 51);
  } else if (turningRight) {
    stepMotor(L_IN1, L_IN2, L_IN3, L_IN4, leftStep, 51);
    stepMotor(R_IN1, R_IN2, R_IN3, R_IN4, rightStep, 49);
  } else if (turningLeft) {
    stepMotor(L_IN1, L_IN2, L_IN3, L_IN4, leftStep, 49);
    stepMotor(R_IN1, R_IN2, R_IN3, R_IN4, rightStep, 51);
  }

  if (SerialBT.available()) {
    char command = SerialBT.read();
    switch (command) {
      case 'F': moveForward(); break;
      case 'B': moveBackward(); break;
      case 'L': turnLeft(); break;
      case 'R': turnRight(); break;
      case 'S': stopMotors(); break;
      case 'K': startBladeMotor(); break;
      case 'k': stopBladeMotor(); break;
      case 'M': extendServos(); break;
    }
  }

  delay(STEP_DELAY);
}
